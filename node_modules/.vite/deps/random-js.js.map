{
  "version": 3,
  "sources": ["browser-external:crypto", "../../random-js/src/utils/constants.ts", "../../random-js/src/distribution/int32.ts", "../../random-js/src/utils/add.ts", "../../random-js/src/distribution/int53.ts", "../../random-js/src/distribution/int53Full.ts", "../../random-js/src/distribution/uint32.ts", "../../random-js/src/distribution/uint53.ts", "../../random-js/src/distribution/uint53Full.ts", "../../random-js/src/distribution/integer.ts", "../../random-js/src/distribution/bool.ts", "../../random-js/src/distribution/date.ts", "../../random-js/src/distribution/die.ts", "../../random-js/src/distribution/dice.ts", "../../random-js/src/distribution/string.ts", "../../random-js/src/distribution/hex.ts", "../../random-js/src/utils/convertSliceArgument.ts", "../../random-js/src/utils/toInteger.ts", "../../random-js/src/distribution/pick.ts", "../../random-js/src/utils/multiply.ts", "../../random-js/src/distribution/realZeroToOneExclusive.ts", "../../random-js/src/distribution/realZeroToOneInclusive.ts", "../../random-js/src/distribution/real.ts", "../../random-js/src/utils/sliceArray.ts", "../../random-js/src/distribution/shuffle.ts", "../../random-js/src/distribution/sample.ts", "../../random-js/src/utils/stringRepeat.ts", "../../random-js/src/distribution/uuid4.ts", "../../random-js/src/engine/nativeMath.ts", "../../random-js/src/Random.ts", "../../random-js/src/utils/Int32Array.ts", "../../random-js/src/engine/browserCrypto.ts", "../../random-js/src/utils/createEntropy.ts", "../../random-js/src/utils/imul.ts", "../../random-js/src/engine/MersenneTwister19937.ts", "../../random-js/src/engine/nodeCrypto.ts", "../../random-js/src/distribution/picker.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "export const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\nexport const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\nexport const UINT32_MAX = -1 >>> 0;\nexport const UINT32_SIZE = UINT32_MAX + 1;\nexport const INT32_SIZE = UINT32_SIZE / 2;\nexport const INT32_MAX = INT32_SIZE - 1;\nexport const UINT21_SIZE = 1 << 21;\nexport const UINT21_MAX = UINT21_SIZE - 1;\n", "import { Engine } from \"../types\";\n\n/**\n * Returns a value within [-0x80000000, 0x7fffffff]\n */\nexport function int32(engine: Engine): number {\n  return engine.next() | 0;\n}\n", "import { Distribution } from \"../types\";\n\nexport function add(distribution: Distribution, addend: number): Distribution {\n  if (addend === 0) {\n    return distribution;\n  } else {\n    return engine => distribution(engine) + addend;\n  }\n}\n", "import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n */\nexport function int53(engine: Engine): number {\n  const high = engine.next() | 0;\n  const low = engine.next() >>> 0;\n  return (\n    (high & UINT21_MAX) * UINT32_SIZE +\n    low +\n    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n  );\n}\n", "import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x20000000000000]\n */\nexport function int53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & 0x400000) {\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n      );\n    }\n  }\n}\n", "import { Engine } from \"../types\";\n\n/**\n * Returns a value within [0, 0xffffffff]\n */\nexport function uint32(engine: Engine): number {\n  return engine.next() >>> 0;\n}\n", "import { Engine } from \"../types\";\nimport { UINT21_MAX, UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x1fffffffffffff]\n */\nexport function uint53(engine: Engine): number {\n  const high = engine.next() & UINT21_MAX;\n  const low = engine.next() >>> 0;\n  return high * UINT32_SIZE + low;\n}\n", "import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x20000000000000]\n */\nexport function uint53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & UINT21_SIZE) {\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\n    }\n  }\n}\n", "import { Distribution, Engine } from \"../types\";\nimport { add } from \"../utils/add\";\nimport {\n  INT32_SIZE,\n  LARGEST_SAFE_INTEGER,\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_MAX,\n  UINT32_SIZE\n} from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { int53 } from \"./int53\";\nimport { int53Full } from \"./int53Full\";\nimport { uint32 } from \"./uint32\";\nimport { uint53 } from \"./uint53\";\nimport { uint53Full } from \"./uint53Full\";\n\nfunction isPowerOfTwoMinusOne(value: number): boolean {\n  return ((value + 1) & value) === 0;\n}\n\nfunction bitmask(masking: number): Distribution {\n  return (engine: Engine) => engine.next() & masking;\n}\n\nfunction downscaleToLoopCheckedRange(range: number): Distribution {\n  const extendedRange = range + 1;\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\n  return engine => {\n    let value = 0;\n    do {\n      value = engine.next() >>> 0;\n    } while (value >= maximum);\n    return value % extendedRange;\n  };\n}\n\nfunction downscaleToRange(range: number): Distribution {\n  if (isPowerOfTwoMinusOne(range)) {\n    return bitmask(range);\n  } else {\n    return downscaleToLoopCheckedRange(range);\n  }\n}\n\nfunction isEvenlyDivisibleByMaxInt32(value: number): boolean {\n  return (value | 0) === 0;\n}\n\nfunction upscaleWithHighMasking(masking: number): Distribution {\n  return engine => {\n    const high = engine.next() & masking;\n    const low = engine.next() >>> 0;\n    return high * UINT32_SIZE + low;\n  };\n}\n\nfunction upscaleToLoopCheckedRange(extendedRange: number): Distribution {\n  const maximum =\n    extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() & UINT21_MAX;\n      const low = engine.next() >>> 0;\n      ret = high * UINT32_SIZE + low;\n    } while (ret >= maximum);\n    return ret % extendedRange;\n  };\n}\n\nfunction upscaleWithinU53(range: number): Distribution {\n  const extendedRange = range + 1;\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\n    if (isPowerOfTwoMinusOne(highRange)) {\n      return upscaleWithHighMasking(highRange);\n    }\n  }\n  return upscaleToLoopCheckedRange(extendedRange);\n}\n\nfunction upscaleWithinI53AndLoopCheck(min: number, max: number): Distribution {\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() | 0;\n      const low = engine.next() >>> 0;\n      ret =\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    } while (ret < min || ret > max);\n    return ret;\n  };\n}\n\n/**\n * Returns a Distribution to return a value within [min, max]\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n */\nexport function integer(min: number, max: number): Distribution {\n  min = Math.floor(min);\n  max = Math.floor(max);\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\n    throw new RangeError(\n      `Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`\n    );\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\n    throw new RangeError(\n      `Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`\n    );\n  }\n\n  const range = max - min;\n  if (range <= 0 || !isFinite(range)) {\n    return () => min;\n  } else if (range === UINT32_MAX) {\n    if (min === 0) {\n      return uint32;\n    } else {\n      return add(int32, min + INT32_SIZE);\n    }\n  } else if (range < UINT32_MAX) {\n    return add(downscaleToRange(range), min);\n  } else if (range === LARGEST_SAFE_INTEGER) {\n    return add(uint53, min);\n  } else if (range < LARGEST_SAFE_INTEGER) {\n    return add(upscaleWithinU53(range), min);\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\n    return add(uint53Full, min);\n  } else if (\n    min === -SMALLEST_UNSAFE_INTEGER &&\n    max === SMALLEST_UNSAFE_INTEGER\n  ) {\n    return int53Full;\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\n    return int53;\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return add(int53, 1);\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n  } else {\n    return upscaleWithinI53AndLoopCheck(min, max);\n  }\n}\n", "import { Distribution, Engine } from \"../types\";\nimport { INT32_SIZE, SMALLEST_UNSAFE_INTEGER, UINT32_SIZE } from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { integer } from \"./integer\";\nimport { uint53 } from \"./uint53\";\n\nfunction isLeastBitTrue(engine: Engine) {\n  return (engine.next() & 1) === 1;\n}\n\nfunction lessThan(\n  distribution: Distribution,\n  value: number\n): Distribution<boolean> {\n  return engine => distribution(engine) < value;\n}\n\nfunction probability(percentage: number) {\n  if (percentage <= 0) {\n    return () => false;\n  } else if (percentage >= 1) {\n    return () => true;\n  } else {\n    const scaled = percentage * UINT32_SIZE;\n    if (scaled % 1 === 0) {\n      return lessThan(int32, (scaled - INT32_SIZE) | 0);\n    } else {\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\n    }\n  }\n}\n\n// tslint:disable:unified-signatures\n\n/**\n * Returns a boolean Distribution with 50% probability of being true or false\n */\nexport function bool(): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with the provided `percentage` of being true\n * @param percentage A number within [0, 1] of how often the result should be `true`\n */\nexport function bool(percentage: number): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with a probability of\n * `numerator` divided by `denominator` of being true\n * @param numerator The numerator of the probability\n * @param denominator The denominator of the probability\n */\nexport function bool(\n  numerator: number,\n  denominator: number\n): Distribution<boolean>;\nexport function bool(\n  numerator?: number,\n  denominator?: number\n): Distribution<boolean> {\n  if (denominator == null) {\n    if (numerator == null) {\n      return isLeastBitTrue;\n    }\n    return probability(numerator);\n  } else {\n    if (numerator! <= 0) {\n      return () => false;\n    } else if (numerator! >= denominator) {\n      return () => true;\n    }\n    return lessThan(integer(0, denominator - 1), numerator!);\n  }\n}\n", "import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution that returns a random `Date` within the inclusive\n * range of [`start`, `end`].\n * @param start The minimum `Date`\n * @param end The maximum `Date`\n */\nexport function date(start: Date, end: Date): Distribution<Date> {\n  const distribution = integer(+start, +end);\n  return engine => new Date(distribution(engine));\n}\n", "import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to return a value within [1, sideCount]\n * @param sideCount The number of sides of the die\n */\nexport function die(sideCount: number): Distribution<number> {\n  return integer(1, sideCount);\n}\n", "import { Distribution } from \"../types\";\nimport { die } from \"./die\";\n\n/**\n * Returns a distribution that returns an array of length `dieCount` of values\n * within [1, `sideCount`]\n * @param sideCount The number of sides of each die\n * @param dieCount The number of dice\n */\nexport function dice(\n  sideCount: number,\n  dieCount: number\n): Distribution<number[]> {\n  const distribution = die(sideCount);\n  return engine => {\n    const result = [];\n    for (let i = 0; i < dieCount; ++i) {\n      result.push(distribution(engine));\n    }\n    return result;\n  };\n}\n", "import { StringDistribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n// tslint:disable:unified-signatures\n\n// has 2**x chars, for faster uniform distribution\nconst DEFAULT_STRING_POOL =\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n/**\n * Returns a distribution that returns a random string using numbers,\n * uppercase and lowercase letters, `_`, and `-` of length `length`.\n * @param length Length of the result string\n */\nexport function string(): StringDistribution;\n/**\n * Returns a distribution that returns a random string using the provided\n * string pool as the possible characters to choose from of length `length`.\n * @param length Length of the result string\n */\nexport function string(pool: string): StringDistribution;\nexport function string(pool: string = DEFAULT_STRING_POOL): StringDistribution {\n  const poolLength = pool.length;\n  if (!poolLength) {\n    throw new Error(\"Expected pool not to be an empty string\");\n  }\n\n  const distribution = integer(0, poolLength - 1);\n  return (engine, length) => {\n    let result = \"\";\n    for (let i = 0; i < length; ++i) {\n      const j = distribution(engine);\n      result += pool.charAt(j);\n    }\n    return result;\n  };\n}\n", "import { StringDistribution } from \"../types\";\nimport { string } from \"./string\";\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\nconst lowerHex = string(LOWER_HEX_POOL);\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\n\n/**\n * Returns a Distribution that returns a random string comprised of numbers\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\n * @param length Length of the result string\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n */\nexport function hex(uppercase?: boolean): StringDistribution {\n  if (uppercase) {\n    return upperHex;\n  } else {\n    return lowerHex;\n  }\n}\n", "export function convertSliceArgument(value: number, length: number): number {\n  if (value < 0) {\n    return Math.max(value + length, 0);\n  } else {\n    return Math.min(value, length);\n  }\n}\n", "export function toInteger(value: number) {\n  const num = +value;\n  if (num < 0) {\n    return Math.ceil(num);\n  } else {\n    return Math.floor(num);\n  }\n}\n", "import { Engine } from \"../types\";\nimport { convertSliceArgument } from \"../utils/convertSliceArgument\";\nimport { toInteger } from \"../utils/toInteger\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a random value within the provided `source` within the sliced\n * bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function pick<T>(\n  engine: Engine,\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): T {\n  const length = source.length;\n  if (length === 0) {\n    throw new RangeError(\"Cannot pick from an empty array\");\n  }\n  const start =\n    begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n  const finish =\n    end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n  if (start >= finish) {\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\n  }\n  const distribution = integer(start, finish - 1);\n  return source[distribution(engine)];\n}\n", "import { Distribution } from \"../types\";\n\nexport function multiply(\n  distribution: Distribution,\n  multiplier: number\n): Distribution {\n  if (multiplier === 1) {\n    return distribution;\n  } else if (multiplier === 0) {\n    return () => 0;\n  } else {\n    return engine => distribution(engine) * multiplier;\n  }\n}\n", "import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53 } from \"./uint53\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0)\n */\nexport function realZeroToOneExclusive(engine: Engine): number {\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n", "import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53Full } from \"./uint53Full\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0]\n */\nexport function realZeroToOneInclusive(engine: Engine): number {\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n", "import { Distribution } from \"../types\";\nimport { add } from \"../utils/add\";\nimport { multiply } from \"../utils/multiply\";\nimport { realZeroToOneExclusive } from \"./realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./realZeroToOneInclusive\";\n\n/**\n * Returns a floating-point value within [min, max) or [min, max]\n * @param min The minimum floating-point value, inclusive.\n * @param max The maximum floating-point value.\n * @param inclusive If true, `max` will be inclusive.\n */\nexport function real(\n  min: number,\n  max: number,\n  inclusive: boolean = false\n): Distribution {\n  if (!isFinite(min)) {\n    throw new RangeError(\"Expected min to be a finite number\");\n  } else if (!isFinite(max)) {\n    throw new RangeError(\"Expected max to be a finite number\");\n  }\n  return add(\n    multiply(\n      inclusive ? realZeroToOneInclusive : realZeroToOneExclusive,\n      max - min\n    ),\n    min\n  );\n}\n", "export const sliceArray = Array.prototype.slice;\n", "import { Engine } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Shuffles an array in-place\n * @param engine The Engine to use when choosing random values\n * @param array The array to shuffle\n * @param downTo minimum index to shuffle. Only used internally.\n */\nexport function shuffle<T>(\n  engine: Engine,\n  array: T[],\n  downTo: number = 0\n): T[] {\n  const length = array.length;\n  if (length) {\n    for (let i = (length - 1) >>> 0; i > downTo; --i) {\n      const distribution = integer(0, i);\n      const j = distribution(engine);\n      if (i !== j) {\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n  return array;\n}\n", "import { Engine } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { shuffle } from \"./shuffle\";\n\n/**\n * From the population array, produce an array with sampleSize elements that\n * are randomly chosen without repeats.\n * @param engine The Engine to use when choosing random values\n * @param population An array that has items to choose a sample from\n * @param sampleSize The size of the result array\n */\nexport function sample<T>(\n  engine: Engine,\n  population: ArrayLike<T>,\n  sampleSize: number\n): T[] {\n  if (\n    sampleSize < 0 ||\n    sampleSize > population.length ||\n    !isFinite(sampleSize)\n  ) {\n    throw new RangeError(\n      \"Expected sampleSize to be within 0 and the length of the population\"\n    );\n  }\n\n  if (sampleSize === 0) {\n    return [];\n  }\n\n  const clone = sliceArray.call(population);\n  const length = clone.length;\n  if (length === sampleSize) {\n    return shuffle(engine, clone, 0);\n  }\n  const tailLength = length - sampleSize;\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\n}\n", "export const stringRepeat = (() => {\n  try {\n    if ((\"x\" as any).repeat(3) === \"xxx\") {\n      return (pattern: string, count: number): string =>\n        (pattern as any).repeat(count);\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (pattern: string, count: number): string => {\n    let result = \"\";\n    while (count > 0) {\n      if (count & 1) {\n        result += pattern;\n      }\n      count >>= 1;\n      pattern += pattern;\n    }\n    return result;\n  };\n})();\n", "import { Engine } from \"../types\";\nimport { stringRepeat } from \"../utils/stringRepeat\";\n\nfunction zeroPad(text: string, zeroCount: number) {\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\n}\n\n/**\n * Returns a Universally Unique Identifier Version 4.\n *\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n */\nexport function uuid4(engine: Engine) {\n  const a = engine.next() >>> 0;\n  const b = engine.next() | 0;\n  const c = engine.next() | 0;\n  const d = engine.next() >>> 0;\n\n  return (\n    zeroPad(a.toString(16), 8) +\n    \"-\" +\n    zeroPad((b & 0xffff).toString(16), 4) +\n    \"-\" +\n    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n    zeroPad(d.toString(16), 8)\n  );\n}\n", "import { Engine } from \"../types\";\nimport { UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * An int32-producing Engine that uses `Math.random()`\n */\nexport const nativeMath: Engine = {\n  next() {\n    return (Math.random() * UINT32_SIZE) | 0;\n  }\n};\n", "import { bool } from \"./distribution/bool\";\nimport { date } from \"./distribution/date\";\nimport { dice } from \"./distribution/dice\";\nimport { die } from \"./distribution/die\";\nimport { hex } from \"./distribution/hex\";\nimport { int32 } from \"./distribution/int32\";\nimport { int53 } from \"./distribution/int53\";\nimport { int53Full } from \"./distribution/int53Full\";\nimport { integer } from \"./distribution/integer\";\nimport { pick } from \"./distribution/pick\";\nimport { real } from \"./distribution/real\";\nimport { realZeroToOneExclusive } from \"./distribution/realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./distribution/realZeroToOneInclusive\";\nimport { sample } from \"./distribution/sample\";\nimport { shuffle } from \"./distribution/shuffle\";\nimport { string } from \"./distribution/string\";\nimport { uint32 } from \"./distribution/uint32\";\nimport { uint53 } from \"./distribution/uint53\";\nimport { uint53Full } from \"./distribution/uint53Full\";\nimport { uuid4 } from \"./distribution/uuid4\";\nimport { nativeMath } from \"./engine/nativeMath\";\nimport { Engine } from \"./types\";\n\n// tslint:disable:unified-signatures\n\n/**\n * A wrapper around an Engine that provides easy-to-use methods for\n * producing values based on known distributions\n */\nexport class Random {\n  private readonly engine: Engine;\n\n  /**\n   * Creates a new Random wrapper\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\n   */\n  constructor(engine: Engine = nativeMath) {\n    this.engine = engine;\n  }\n\n  /**\n   * Returns a value within [-0x80000000, 0x7fffffff]\n   */\n  public int32(): number {\n    return int32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0xffffffff]\n   */\n  public uint32(): number {\n    return uint32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x1fffffffffffff]\n   */\n  public uint53(): number {\n    return uint53(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x20000000000000]\n   */\n  public uint53Full(): number {\n    return uint53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n   */\n  public int53(): number {\n    return int53(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\n   */\n  public int53Full(): number {\n    return int53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [min, max]\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n   */\n  public integer(min: number, max: number): number {\n    return integer(min, max)(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0]\n   */\n  public realZeroToOneInclusive(): number {\n    return realZeroToOneInclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0)\n   */\n  public realZeroToOneExclusive(): number {\n    return realZeroToOneExclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [min, max) or [min, max]\n   * @param min The minimum floating-point value, inclusive.\n   * @param max The maximum floating-point value.\n   * @param inclusive If true, `max` will be inclusive.\n   */\n  public real(min: number, max: number, inclusive: boolean = false): number {\n    return real(min, max, inclusive)(this.engine);\n  }\n\n  /**\n   * Returns a boolean with 50% probability of being true or false\n   */\n  public bool(): boolean;\n  /**\n   * Returns a boolean with the provided `percentage` of being true\n   * @param percentage A number within [0, 1] of how often the result should be `true`\n   */\n  public bool(percentage: number): boolean;\n  /**\n   * Returns a boolean with a probability of `numerator`/`denominator` of being true\n   * @param numerator The numerator of the probability\n   * @param denominator The denominator of the probability\n   */\n  public bool(numerator: number, denominator: number): boolean;\n  public bool(numerator?: number, denominator?: number): boolean {\n    return bool(numerator!, denominator!)(this.engine);\n  }\n\n  /**\n   * Return a random value within the provided `source` within the sliced\n   * bounds of `begin` and `end`.\n   * @param source an array of items to pick from\n   * @param begin the beginning slice index (defaults to `0`)\n   * @param end the ending slice index (defaults to `source.length`)\n   */\n  public pick<T>(source: ArrayLike<T>, begin?: number, end?: number): T {\n    return pick(this.engine, source, begin, end);\n  }\n\n  /**\n   * Shuffles an array in-place\n   * @param array The array to shuffle\n   */\n  public shuffle<T>(array: T[]): T[] {\n    return shuffle(this.engine, array);\n  }\n\n  /**\n   * From the population array, returns an array with sampleSize elements that\n   * are randomly chosen without repeats.\n   * @param population An array that has items to choose a sample from\n   * @param sampleSize The size of the result array\n   */\n  public sample<T>(population: ArrayLike<T>, sampleSize: number): T[] {\n    return sample(this.engine, population, sampleSize);\n  }\n\n  /**\n   * Returns a value within [1, sideCount]\n   * @param sideCount The number of sides of the die\n   */\n  public die(sideCount: number): number {\n    return die(sideCount)(this.engine);\n  }\n\n  /**\n   * Returns an array of length `dieCount` of values within [1, sideCount]\n   * @param sideCount The number of sides of each die\n   * @param dieCount The number of dice\n   */\n  public dice(sideCount: number, dieCount: number): number[] {\n    return dice(sideCount, dieCount)(this.engine);\n  }\n\n  /**\n   * Returns a Universally Unique Identifier Version 4.\n   *\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n   */\n  public uuid4(): string {\n    return uuid4(this.engine);\n  }\n\n  /**\n   * Returns a random string using numbers, uppercase and lowercase letters,\n   * `_`, and `-` of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number): string;\n  /**\n   * Returns a random string using the provided string pool as the possible\n   * characters to choose from of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number, pool: string): string;\n  public string(length: number, pool?: string): string {\n    return string(pool!)(this.engine, length);\n  }\n\n  /**\n   * Returns a random string comprised of numbers or the characters `abcdef`\n   * (or `ABCDEF`) of length `length`.\n   * @param length Length of the result string\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n   */\n  public hex(length: number, uppercase?: boolean): string {\n    return hex(uppercase)(this.engine, length);\n  }\n\n  /**\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\n   * @param start The minimum `Date`\n   * @param end The maximum `Date`\n   */\n  public date(start: Date, end: Date): Date {\n    return date(start, end)(this.engine);\n  }\n}\n", "import { INT32_SIZE } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n */\nconst I32Array: typeof Int32Array = (() => {\n  try {\n    const buffer = new ArrayBuffer(4);\n    const view = new Int32Array(buffer);\n    view[0] = INT32_SIZE;\n    if (view[0] === -INT32_SIZE) {\n      return Int32Array;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (Array as unknown) as typeof Int32Array;\n})();\nexport { I32Array as Int32Array };\n", "import { Engine } from \"../types\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\n * which is typically available in modern browsers.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n *\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const browserCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      if (data === null) {\n        data = new Int32Array(COUNT);\n      }\n      crypto.getRandomValues(data);\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n", "import { nativeMath } from \"../engine/nativeMath\";\nimport { Engine } from \"../types\";\n\n/**\n * Returns an array of random int32 values, based on current time\n * and a random number engine\n *\n * @param engine an Engine to pull random values from, default `nativeMath`\n * @param length the length of the Array, minimum 1, default 16\n */\nexport function createEntropy(\n  engine: Engine = nativeMath,\n  length: number = 16\n): number[] {\n  const array: number[] = [];\n  array.push(new Date().getTime() | 0);\n  for (let i = 1; i < length; ++i) {\n    array[i] = engine.next() | 0;\n  }\n  return array;\n}\n", "import { UINT32_MAX } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n */\nexport const imul: (a: number, b: number) => number = (() => {\n  try {\n    if ((Math as any).imul(UINT32_MAX, 5) === -5) {\n      return (Math as any).imul;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  const UINT16_MAX = 0xffff;\n  return (a: number, b: number) => {\n    const ah = (a >>> 16) & UINT16_MAX;\n    const al = a & UINT16_MAX;\n    const bh = (b >>> 16) & UINT16_MAX;\n    const bl = b & UINT16_MAX;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n  };\n})();\n", "import { Engine } from \"../types\";\nimport { INT32_MAX, INT32_SIZE } from \"../utils/constants\";\nimport { createEntropy } from \"../utils/createEntropy\";\nimport { imul } from \"../utils/imul\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nconst ARRAY_SIZE = 624;\nconst ARRAY_MAX = ARRAY_SIZE - 1;\nconst M = 397;\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\nconst A = 0x9908b0df;\n\n/**\n * An Engine that is a pseudorandom number generator using the Mersenne\n * Twister algorithm based on the prime 2**19937 − 1\n *\n * See http://en.wikipedia.org/wiki/Mersenne_twister\n */\nexport class MersenneTwister19937 implements Engine {\n  /**\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\n   * @param initial the initial seed value\n   */\n  public static seed(initial: number): MersenneTwister19937 {\n    return new MersenneTwister19937().seed(initial);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\n   * @param source A series of int32 values\n   */\n  public static seedWithArray(source: ArrayLike<number>): MersenneTwister19937 {\n    return new MersenneTwister19937().seedWithArray(source);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with the current time and\n   * a series of natively-generated random values\n   */\n  public static autoSeed(): MersenneTwister19937 {\n    return MersenneTwister19937.seedWithArray(createEntropy());\n  }\n\n  private readonly data = new Int32Array(ARRAY_SIZE);\n  private index = 0; // integer within [0, 624]\n  private uses = 0;\n\n  /**\n   * MersenneTwister19937 should not be instantiated directly.\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\n   */\n  private constructor() {}\n\n  /**\n   * Returns the next int32 value of the sequence\n   */\n  public next(): number {\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n\n    const value = this.data[this.index];\n    this.index = (this.index + 1) | 0;\n    this.uses += 1;\n    return temper(value) | 0;\n  }\n\n  /**\n   * Returns the number of times that the Engine has been used.\n   *\n   * This can be provided to an unused MersenneTwister19937 with the same\n   * seed, bringing it to the exact point that was left off.\n   */\n  public getUseCount(): number {\n    return this.uses;\n  }\n\n  /**\n   * Discards one or more items from the engine\n   * @param count The count of items to discard\n   */\n  public discard(count: number): this {\n    if (count <= 0) {\n      return this;\n    }\n    this.uses += count;\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n    while (count + this.index > ARRAY_SIZE) {\n      count -= ARRAY_SIZE - this.index;\n      refreshData(this.data);\n      this.index = 0;\n    }\n    this.index = (this.index + count) | 0;\n    return this;\n  }\n\n  private seed(initial: number): this {\n    let previous = 0;\n    this.data[0] = previous = initial | 0;\n\n    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\n      this.data[i] = previous =\n        (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\n    }\n    this.index = ARRAY_SIZE;\n    this.uses = 0;\n    return this;\n  }\n\n  private seedWithArray(source: ArrayLike<number>): this {\n    this.seed(0x012bd6aa);\n    seedWithArray(this.data, source);\n    return this;\n  }\n}\n\nfunction refreshData(data: Int32Array) {\n  let k = 0;\n  let tmp = 0;\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] =\n      data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\n  data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n}\n\nfunction temper(value: number) {\n  value ^= value >>> 11;\n  value ^= (value << 7) & 0x9d2c5680;\n  value ^= (value << 15) & 0xefc60000;\n  return value ^ (value >>> 18);\n}\n\nfunction seedWithArray(data: Int32Array, source: ArrayLike<number>) {\n  let i = 1;\n  let j = 0;\n  const sourceLength = source.length;\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\n  let previous = data[0] | 0;\n  for (; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\n        (source[j] | 0) +\n        (j | 0)) |\n      0;\n    i = (i + 1) | 0;\n    ++j;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n    if (j >= sourceLength) {\n      j = 0;\n    }\n  }\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\n    i = (i + 1) | 0;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n  }\n  data[0] = INT32_SIZE;\n}\n", "import { Engine } from \"../types\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the node-available\n * `require('crypto').randomBytes`, which has been available since 0.58.\n *\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n *\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const nodeCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      data = new Int32Array(\n        new Int8Array(require(\"crypto\").randomBytes(4 * COUNT)).buffer\n      );\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n", "import { Distribution } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to random value within the provided `source`\n * within the sliced bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function picker<T>(\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): Distribution<T> {\n  const clone = sliceArray.call(source, begin, end);\n  if (clone.length === 0) {\n    throw new RangeError(`Cannot pick from a source with no items`);\n  }\n  const distribution = integer(0, clone.length - 1);\n  return engine => clone[distribution(engine)];\n}\n"],
  "mappings": "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",
  "names": ["Int32Array", "data", "COUNT", "index"]
}
